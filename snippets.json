{
    "g6-animate-stop-animate": {
        "prefix": "g6-animate-stop-animate",
        "body": [
            "this.graph.stopAnimate();"
        ],
        "description": "停止动画"
    },
    "g6-clear": {
        "prefix": "g6-clear",
        "body": [
            "/**",
            " * 清除画布元素",
            " * 该方法一般用于清空数据源，重新设置数据源，重新render的场景，此时所有的图形都会被清除",
            " */",
            "this.graph.clear();"
        ],
        "description": "清除画布"
    },
    "g6-clearItemStates": {
        "prefix": "g6-clearItemStates",
        "body": [
            "// 清除指定的状态",
            "this.graph.clearItemStates(item, ['bodyState:healthy', 'selected', 'active']);",
            "",
            "// 清除全部的转台",
            "this.graph.clearItemStates(item);"
        ],
        "description": "取消多个/全部状态"
    },
    "g6-coord-getCanvasByPoint": {
        "prefix": "g6-coord-getCanvasByPoint",
        "body": [
            "/**",
            " * 将视口坐标转换为Canvas画布坐标",
            " * @param pointX 视口x坐标",
            " * @param pointY 视口y坐标",
            " * @returns Canvas 画布坐标",
            " */",
            "this.graph.getCanvasByPoint(pointX, pointY);",
            "",
            "const model = node.getModel();",
            "const { x: canvasX, y: canvasY } = this.graph.getCanvasByPoint(model.x, model.y);"
        ],
        "description": "pointX/pointY 转 canvasX/canvasY"
    },
    "g6-coord-getClientByPoint": {
        "prefix": "g6-coord-getClientByPoint",
        "body": [
            "/**",
            " * 将视口坐标转换为屏幕/页面坐标",
            " * @param pointX 视口x坐标",
            " * @param pointY 视口y坐标",
            " * @returns 屏幕/页面坐标",
            " */",
            "this.graph.getClientByPoint(pointX, pointY);",
            "",
            "const model = node.getModel();",
            "const { x: clientX, y: clientY } = this.graph.getClientByPoint(model.x, model.y);"
        ],
        "description": "pointX/pointY 转 clientX/clientY"
    },
    "g6-coord-getPointByCanvas": {
        "prefix": "g6-coord-getPointByCanvas",
        "body": [
            "/**",
            " * 将Canvas画布坐标转换为视口坐标",
            " * @param canvasX 画布x坐标",
            " * @param canvasY 画布y坐标",
            " * @returns 视口坐标",
            " */",
            "this.graph.getPointByCanvas(canvasX, canvasY);",
            "",
            "const point = this.graph.getPointByCanvas(canvasX, canvasY);",
            "const { x: clientX, y: clientY } = this.graph.getClientByPoint(point.x, point.y);"
        ],
        "description": "canvasX/canvasY 转 clientX/clientY"
    },
    "g6-coord-getPointByClient": {
        "prefix": "g6-coord-getPointByClient",
        "body": [
            "/**",
            " * 将屏幕/页面坐标转换为视口坐标",
            " * @param clientX 屏幕x坐标",
            " * @param clientY 屏幕y坐标",
            " * @returns 视口坐标",
            " */",
            "this.graph.getPointByClient(clientX, clientY);",
            "",
            "const point = this.graph.getPointByClient(evt.clientX, evt.clientY);",
            "const { x: canvasX, y: canvasY } = this.graph.getCanvasByPoint(point.x, point.y);"
        ],
        "description": "clientX/clientY 转 canvasX/canvasY"
    },
    "g6-defaultEdge-data": {
        "prefix": "g6-defaultEdge-data",
        "body": [
            "defaultEdge: {",
            "    style: {",
            "      opacity: 0.6,",
            "      stroke: 'grey',",
            "    },",
            "    labelCfg: {",
            "      autoRotate: true,",
            "    },",
            "  },"
        ],
        "description": "default edge数据结构"
    },
    "g6-demo": {
        "prefix": "g6-demo",
        "body": [
            "<!DOCTYPE html>",
            "<html lang=\"en\">",
            "",
            "<head>",
            "    <meta charset=\"UTF-8\">",
            "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">",
            "    <title>Document</title>",
            "    <style>",
            "        #container {",
            "            width: calc(100vw - 50px);",
            "            height: calc(100vh - 50px);",
            "        }",
            "",
            "        .g6-tooltip {",
            "            border-radius: 6px;",
            "            font-size: 12px;",
            "            color: #fff;",
            "            background-color: #000;",
            "            padding: 2px 8px;",
            "            text-align: center;",
            "        }",
            "    </style>",
            "    <script src=\"../../lib/g6.min.js\"></script>",
            "    <!-- <script src=\"../00-mock/8dacf27e-e1bc-4522-b6d3-4b6d9b9ed7df.js\"></script> -->",
            "</head>",
            "",
            "<body>",
            "    <!-- 1. 创建容器 -->",
            "    <div id=\"container\"></div>",
            "    <script>",
            "        ",
            "    </script>",
            "</body>",
            "",
            "</html>"
        ],
        "description": "g6 demo初始框架"
    },
    "g6-destroy": {
        "prefix": "g6-destroy",
        "body": [
            "this.graph.destroy();"
        ],
        "description": "销毁画布"
    },
    "g6-diy-marker": {
        "prefix": "g6-diy-marker",
        "body": [
            "G6.registerEdge('customNode', {",
            "    draw(cfg, group) {",
            "        const marker = group.addShape('marker', {",
            "            attrs: {",
            "                // ... 其他图形属性",
            "                r: cfg.size[0],",
            "            },",
            "            draggable: true,",
            "            name: 'marker-shape',",
            "        })",
            "        return keyShape",
            "    },",
            "})"
        ],
        "description": "自定义marker"
    },
    "g6-edge-diy": {
        "prefix": "g6-edge-diy",
        "body": [
            "/**",
            " * 功能: TODO",
            " * 作者: 郝海亮",
            " * 日期: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            " */",
            "import G6 from '@antv/g6';",
            "",
            "export default () => {",
            "    G6.registerEdge('flow-line', {",
            "        draw(cfg, group) {",
            "            const { startPoint, endPoint, source } = cfg;",
            "            const { style } = cfg;",
            "            let shape;",
            "",
            "            shape = group.addShape('path', {",
            "                attrs: {",
            "                    stroke: style.stroke,",
            "                    endArrow: style.endArrow,",
            "                    path: [",
            "                        ['M', startPoint.x, startPoint.y],",
            "                        ['L', startPoint.x, (startPoint.y + endPoint.y) / 2],",
            "                        ['L', endPoint.x, (startPoint.y + endPoint.y) / 2],",
            "                        ['L', endPoint.x, endPoint.y],",
            "                    ],",
            "                },",
            "            });",
            "",
            "            return shape;",
            "        },",
            "    })",
            "}",
            "// =============================================== edge.js ==============================================="
        ],
        "description": "自定义边"
    },
    "g6-edge-getSource": {
        "prefix": "g6-edge-getSource",
        "body": [
            "this.graph.on('node:mouseenter', function (e) {",
            "    const item = e.item;",
            "    graph.getEdges().forEach(function (edge) {",
            "        if (edge.getSource() === item) {",
            "            // TODO",
            "        } else if (edge.getTarget() === item) {",
            "            // TODO",
            "        }",
            "    });",
            "});"
        ],
        "description": "获取起始节点和终止节点"
    },
    "g6-edge-traverse": {
        "prefix": "g6-edge-traverse",
        "body": [
            "/**",
            " * 设置各个边样式及其他配置，以及在各个状态下节点的KeyShape的样式",
            " * @param nodeFn 返回每条边的配置",
            " */",
            "this.graph.edge((edge) => {",
            "    return {",
            "        id: edge.id,",
            "        type: 'polyline',",
            "        style: {",
            "            fill: 'steelblue',",
            "        },",
            "    };",
            "});"
        ],
        "description": "边遍历"
    },
    "g6-edge-type-common-labelcfg": {
        "prefix": "g6-edge-type-common-labelcfg",
        "body": [
            "// [节点标签和边标签共有属性]https://g6.antv.vision/zh/docs/api/shapeProperties#文本-text",
            "const data = {",
            "    edges: [",
            "        {",
            "            labelCfg: {",
            "                refX: '标签在 x 方向的偏移量',",
            "                refY: '标签在 y 方向的偏移量',",
            "                position: 'start | middle | end', // 默认middle",
            "                autoRotate: true, // 标签文字是否跟随边旋转",
            "                style: {",
            "                    fill: '文本颜色',",
            "                    stroke: '文本描边颜色',",
            "                    lineWidth: '文本描边粗细',",
            "                    opacity: '文本透明度',",
            "                    fontFamily: '文本字体',",
            "                    fontSize: '文本字体大小',",
            "",
            "                    background: {",
            "                        fill: '#ffffff',",
            "                        stroke: '#9EC9FF',",
            "                        padding: [2, 2, 2, 2],",
            "                        radius: 2,",
            "                    },",
            "                }",
            "            },",
            "        },",
            "    ],",
            "};"
        ],
        "description": "标签文本label及其配置labelCfg"
    },
    "g6-edge-type-common-prop": {
        "prefix": "g6-edge-type-common-prop",
        "body": [
            "// [边总览]https://g6.antv.vision/zh/docs/manual/middle/elements/edges/defaultEdge",
            "const data = {",
            "    edges: [",
            "        {",
            "            id: '非必填',",
            "            source: 'string',",
            "            target: 'string',",
            "            type: 'line',",
            "            // sourceAnchor:",
            "            // targetAnchor:",
            "            style: {},",
            "            label: '边描述',",
            "            labelCfg: {},",
            "        },",
            "    ],",
            "};"
        ],
        "description": "边的公共属性"
    },
    "g6-edge-type-common-style": {
        "prefix": "g6-edge-type-common-style",
        "body": [
            "// [边样式属性]g6.antv.vision/zh/docs/manual/middle/elements/edges/defaultEdge#样式属性--style",
            "const data = {",
            "    edges: [",
            "        {",
            "            style: {",
            "                stroke: '边的颜色',",
            "                lineWidth: '边宽度',",
            "                lineAppendWidth: '边响应鼠标事件时的检测宽度', // 当 lineWidth 太小而不易选中时，可以通过该参数提升击中范围",
            "                endArrow,",
            "                startArrow,",
            "                strokeOpacity: '边透明度',",
            "                shadowColor: '阴影颜色',",
            "                shadowBlur: '阴影模糊程度',",
            "                shadowOffsetX: '阴影x方向偏移量',",
            "                shadowOffsetY: '阴影 y 方向偏移量',",
            "                lineDash: [2, 2],",
            "                cursor: 'cursor',",
            "            },",
            "        },",
            "    ],",
            "};"
        ],
        "description": "公共的样式属性"
    },
    "g6-edge-type-line": {
        "prefix": "g6-edge-type-line",
        "body": [
            "https://antv-g6.gitee.io/zh/docs/manual/middle/elements/edges/defaultEdge#内置边类型说明",
            "const data = {",
            "    edges: [",
            "        {",
            "            id: 'edge0',",
            "            source: 'node0',",
            "            target: 'node1',",
            "            type: 'line',",
            "        },",
            "    ],",
            "};"
        ],
        "description": "边类型-直线"
    },
    "g6-eles-animate": {
        "prefix": "g6-eles-animate",
        "body": [
            "<script src=\"https://cdn.bootcdn.net/ajax/libs/tween.js/18.6.4/tween.umd.min.js\"></script>",
            "",
            "import TWEEN from '@tweenjs/tween.js';",
            "",
            "animate = (time) => {",
            "    requestAnimationFrame(this.animate);",
            "    TWEEN.update(time);",
            "};",
            "",
            "moveHightPoint2Center = () => {",
            "    requestAnimationFrame(this.animate);",
            "    new TWEEN",
            "        .Tween({ x: sourceX, y: sourceY })",
            "        .to({ x: targetX, y: targetY }, 1000)",
            "        .easing(TWEEN.Easing.Quartic.InOut)",
            "        .onUpdate(function (object) {",
            "            const model = targetNode.get('model');",
            "            // model.fx = object.x",
            "            // model.fy = object.y",
            "            graph.updateItem(targetNode, { x: object.x, y: object.y });",
            "        })",
            "        .onComplete(function () {",
            "            console.log('onComplete');",
            "        })",
            "        .start();",
            "};"
        ],
        "description": "elements 动画"
    },
    "g6-evt-canvas-click": {
        "prefix": "g6-evt-canvas-click",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "graph.on('canvas:click', evt => {",
            "    const { clientX, clientY } = evt;",
            "    console.log('%c clientX===', 'color:#fffbackground: red', clientX);",
            "    console.log('%c clientY===', 'color:#fffbackground: red', clientY);",
            "});"
        ],
        "description": "canvas click"
    },
    "g6-evt-common-prop": {
        "prefix": "g6-evt-common-prop",
        "body": [
            "/**",
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            " * @param type 事件类型",
            " * @param name 事件名称",
            " * @param x 画布上的x坐标",
            " * @param y 画布上的y坐标",
            " * @param clientX 浏览器窗口上的x坐标",
            " * @param clientY 浏览器窗口上的y坐标",
            " * @param canvasX 画布父容器视口上的x坐标",
            " * @param canvasY 画布父容器视口上的y坐标",
            " * @param item 事件的触发元素（节点/边/Combo）",
            " * @param target 事件的触发图形Shape或画布对象",
            " * @param bubbles 是否允许冒泡",
            " * @param defaultPrevented 是否阻止了原生事件",
            " * @param originalEvent 原始浏览器事件对象，其中的button可以用于区分click事件的左/中/右键",
            " * @param timeStamp 触发事件的时间",
            " * @param propagationStopped 是否阻止传播（向上冒泡）",
            " * @param propagationPath 触发事件的路径",
            " */",
            "graph.on(eventName, evt => {",
            "    // 一些操作",
            "});"
        ],
        "description": "事件对象内部的属性"
    },
    "g6-evt-common-triger": {
        "prefix": "g6-evt-common-triger",
        "body": [
            "/**",
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            " * triggerType属性",
            " * @param click 单击鼠标左键或者按下回车键时触发",
            " * @param dblclick 双击鼠标左键时触发，同时会触发两次 click",
            " * @param mouseenter 鼠标移入元素范围内触发，该事件不冒泡，即鼠标移到其后代元素上时不会触发",
            " * @param mousemove 鼠标在元素内部移到时不断触发，不能通过键盘触发",
            " * @param mouseout 鼠标移出目标元素后触发",
            " * @param mouseover 鼠标移入目标元素上方，鼠标移到其后代元素上时会触发",
            " * @param mouseleave 鼠标移出元素范围时触发，该事件不冒泡，即鼠标移到其后代元素时不会触发",
            " * @param mousedown 鼠标按钮被按下（左键或者右键）时触发，不能通过键盘触发",
            " * @param mouseup 鼠标按钮被释放弹起时触发，不能通过键盘触发",
            " * @param contextmenu 用户右击鼠标时触发并打开上下文菜单，见https://g6.antv.vision/zh/examples/tool/contextMenu",
            " * @param dragstart 当拖拽元素开始被拖拽的时候触发的事件，此事件作用在被拖曳元素上",
            " * @param drag 当拖拽元素在拖动过程中时触发的事件，此事件作用于被拖拽元素上",
            " * @param dragend 当拖拽完成后触发的事件，此事件作用在被拖曳元素上",
            " * @param dragenter 当拖曳元素进入目标元素的时候触发的事件，此事件作用在目标元素上",
            " * @param dragleave 当拖曳元素离开目标元素的时候触发的事件，此事件作用在目标元素上",
            " * @param drop 被拖拽的元素在目标元素上同时鼠标放开触发的事件，此事件作用在目标元素上",
            " * @param keydown 按下键盘键触发该事件",
            " * @param keyup 释放键盘键触发该事件",
            " * @param wheel 鼠标滚轮滚动时触发该事件",
            " * @param touchstart 当手指触摸屏幕时候触发，即使已经有一个手指放在屏幕上也会触发",
            " * @param touchmove 当手指在屏幕上滑动的时候连续地触发。在这个事件发生期间，调用 preventDefault() 事件可以阻止滚动。",
            " * @param touchend 当手指从屏幕上离开的时候触发",
            " */",
            "graph.on(nodeType:triggerType, evt => {",
            "    // 一些操作",
            "});"
        ],
        "description": "通用事件类型"
    },
    "g6-evt-edge-click": {
        "prefix": "g6-evt-edge-click",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "this.graph.on('edge:click', evt => {",
            "    const clickEdges = this.graph.findAllByState('edge', 'click');",
            "    clickEdges.forEach((ce) => {",
            "        this.graph.setItemState(ce, 'click', false);",
            "    });",
            "    const edgeItem = evt.item;",
            "    this.graph.setItemState(edgeItem, 'click', true);",
            "});"
        ],
        "description": "edge click"
    },
    "g6-evt-node-click": {
        "prefix": "g6-evt-node-click",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "this.graph.on('node:click', evt => {",
            "    const item = evt.item; // 被操作的节点 item",
            "    const shape = evt.target; // 被操作的具体图形",
            "    const name = shape.get('name'); // 被点击的具体shape",
            "",
            "    const clickNodes = this.graph.findAllByState('node', 'click');",
            "    clickNodes.forEach((cn) => {",
            "        this.graph.setItemState(cn, 'click', false);",
            "    });",
            "    const nodeItem = evt.item;",
            "    this.graph.setItemState(nodeItem, 'click', true);",
            "});"
        ],
        "description": "node click"
    },
    "g6-evt-node-click-off-all-1": {
        "prefix": "g6-evt-node-click-off-all-1",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "/**",
            " * 为图解除某事件的所有监听",
            " * @param eventName 事件名",
            " */",
            "this.graph.off(eventName);",
            "",
            "// 监听函数",
            "const fn1 = (evt) => {",
            "    const item = evt.item; // 被操作的节点 item",
            "    const target = evt.target; // 被操作的具体图形",
            "    // ...",
            "};",
            "const fn2 = (evt) => {",
            "    // ...",
            "};",
            "// 为图上的所有节点绑定点击监听",
            "graph.on('node:click', fn1);",
            "graph.on('node:click', fn2);",
            "",
            "// 解除上面的所有节点点击监听事件",
            "graph.off('node:click');"
        ],
        "description": "为图解除所有的事件监听"
    },
    "g6-evt-node-click-off-all-2": {
        "prefix": "g6-evt-node-click-off-all-2",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "this.graph.off();",
            "",
            "// 监听函数",
            "const fn1 = (evt) => {",
            "    // ...",
            "};",
            "const fn2 = (evt) => {",
            "    // ...",
            "};",
            "// 为图上的所有节点绑定点击监听",
            "this.graph.on('node:mouseenter', fn1);",
            "this.graph.on('afteranimate', fn2);",
            "",
            "// 解除图上所有监听事件",
            "this.graph.off();"
        ],
        "description": "为图解除所有监听"
    },
    "g6-evt-node-click-off-single": {
        "prefix": "g6-evt-node-click-off-single",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "/**",
            " * 为图解除指定的事件监听",
            " * @param eventName 事件名",
            " * @param handler 监听函数",
            " */",
            "this.graph.off(eventName, handler);",
            "",
            "// 监听函数",
            "const fn = (evt) => {",
            "    const item = evt.item // 被操作的节点 item",
            "    const target = evt.target // 被操作的具体图形",
            "    // ...",
            "};",
            "// 为图上的所有节点绑定点击监听",
            "graph.on('node:click', fn);",
            "",
            "// 解除上面的点击监听事件，注意 fn 必须是同一个对象",
            "graph.off('node:click', fn);"
        ],
        "description": "为图解除指定的事件监听"
    },
    "g6-evt-node-mouseenter": {
        "prefix": "g6-evt-node-mouseenter",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "this.graph.on('node:mouseenter', evt => {",
            "    const nodeItem = evt.item;",
            "    this.graph.setItemState(nodeItem, 'hover', true);",
            "});"
        ],
        "description": "node mouse enter"
    },
    "g6-evt-node-mouseleave": {
        "prefix": "g6-evt-node-mouseleave",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "this.graph.on('node:mouseleave', evt => {",
            "    const nodeItem = evt.item;",
            "    this.graph.setItemState(nodeItem, 'hover', false);",
            "});"
        ],
        "description": "node mouse leave"
    },
    "g6-evt-node-triger": {
        "prefix": "g6-evt-node-triger",
        "body": [
            "/**",
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            " * triggerType属性",
            " * @param dragover 当拖曳节点在另一目标元素上移动时触发此事件，此事件作用在目标元素上",
            " */",
            "graph.on(node:dragover, evt => {",
            "    // 一些操作",
            "});"
        ],
        "description": "node事件独有类型"
    },
    "g6-evt-shape-click": {
        "prefix": "g6-evt-shape-click",
        "body": [
            "// [可选事件]https://g6.antv.vision/zh/docs/api/Event",
            "// 注册自定义节点",
            "// G6.registerNode(",
            "//     'customNode',",
            "//     {",
            "//         // 绘制节点",
            "//         drawShape: function drawShape(cfg, group) {",
            "//             const shapeType = this.shapeType;",
            "//             const style = Object.assign({}, this.getShapeStyle(cfg), {",
            "//                 x: 0,",
            "//                 y: 0,",
            "//                 r: 50,",
            "//             });",
            "//             const shape = group.addShape(shapeType, {",
            "//                 attrs: style,",
            "//                 name: 'key-shape',",
            "//             });",
            "//             // 绘制节点里面的小圆。点击这个小圆会显示tooltip",
            "//             group.addShape('circle', {",
            "//                 attrs: {",
            "//                     x: 0,",
            "//                     y: -30,",
            "//                     r: 10,",
            "//                     fill: '#096dd9',",
            "//                     cursor: 'pointer',",
            "//                 },",
            "//                 name: 'circle-shape',",
            "//             });",
            "//             return shape;",
            "//         },",
            "//     },",
            "//     'circle',",
            "// );",
            "",
            "// graph.on('node:click', function (event) {",
            "//     const { item } = event;",
            "//     graph.setItemState(item, 'selected', true);",
            "// });",
            "",
            "this.graph.on('circle-shape:click', (evt) => {",
            "    const { item } = evt;",
            "    graph.updateItem(item, {",
            "        label: '点击了圆',",
            "        labelCfg: {",
            "            style: {",
            "                fill: '#003a8c',",
            "                fontSize: 16,",
            "            },",
            "        },",
            "    });",
            "});"
        ],
        "description": "node上的shape监听事件"
    },
    "g6-init-layout": {
        "prefix": "g6-init-layout",
        "body": [
            "/**",
            " * 功能: TODO",
            " * 作者: 郝海亮",
            " * 日期: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            " */",
            "",
            "import {",
            "    nodeWidth,",
            "    nodeHeight,",
            "    hGap,",
            "    vGap,",
            "} from './constant';",
            "",
            "export default () => ({",
            "    type: 'compactBox',",
            "    direction: 'TB',",
            "    getId: function getId(d) {",
            "        return d.id;",
            "    },",
            "    getHeight: function getHeight() {",
            "        return nodeWidth;",
            "    },",
            "    getWidth: function getWidth() {",
            "        return nodeHeight;",
            "    },",
            "    getVGap: function getVGap() {",
            "        return vGap;",
            "    },",
            "    getHGap: function getHGap() {",
            "        return hGap;",
            "    },",
            "});",
            "",
            "// ============================================== layout.js =============================================="
        ],
        "description": "自定义布局"
    },
    "g6-init-marker": {
        "prefix": "g6-init-marker",
        "body": [
            "/**",
            " * 功能: TODO",
            " * 作者: 郝海亮",
            " * 日期: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            " */",
            "",
            "/**",
            " * 生成加号 - 不带圆圈",
            " * @param x x坐标",
            " * @param y y坐标",
            " * @param r 半径",
            " * @returns path路径",
            " */",
            "export const createPlusOnly = (x, y, r) => [",
            "    ['M', x + 2 - r, y - r],",
            "    ['L', x + r - 2, y - r],",
            "    ['M', x, y - 2 * r + 2],",
            "    ['L', x, y - 2],",
            "];",
            "",
            "/**",
            " * 生成减号 - 不带圆圈",
            " * @param x x坐标",
            " * @param y y坐标",
            " * @param r 半径",
            " * @returns path路径",
            " */",
            "export const createMinusOnly = (x, y, r) => [",
            "    ['M', x + 2 - r, y - r],",
            "    ['L', x + r - 2, y - r],",
            "];",
            "",
            "/**",
            " * 只有圆圈",
            " * @param x x坐标",
            " * @param y y坐标",
            " * @param r 半径",
            " * @returns path路径",
            " */",
            "export const createCircleMarker = (x, y, r) => [",
            "    ['M', x - r, y - r],",
            "    ['a', r, r, 0, 1, 0, r * 2, 0],",
            "    ['a', r, r, 0, 1, 0, -r * 2, 0],",
            "    // ['M', x + 2 - r, y - r],",
            "    // ['L', x + r - 2, y - r],",
            "    // ['M', x, y - 2 * r + 2],",
            "    // ['L', x, y - 2],",
            "];",
            "",
            "/**",
            " * 生成加号 - 带圆圈",
            " * @param x x坐标",
            " * @param y y坐标",
            " * @param r 半径",
            " * @returns path路径",
            " */",
            "export const createPlusMarker = (x, y, r) => [",
            "    ['M', x - r, y - r],",
            "    ['a', r, r, 0, 1, 0, r * 2, 0],",
            "    ['a', r, r, 0, 1, 0, -r * 2, 0],",
            "    ['M', x + 2 - r, y - r],",
            "    ['L', x + r - 2, y - r],",
            "    ['M', x, y - 2 * r + 2],",
            "    ['L', x, y - 2],",
            "];",
            "",
            "/**",
            " * 生成减号 - 带圆圈",
            " * @param x x坐标",
            " * @param y y坐标",
            " * @param r 半径",
            " * @returns path路径",
            " */",
            "export const createMinusMarker = (x, y, r) => [",
            "    ['M', x - r, y - r],",
            "    ['a', r, r, 0, 1, 0, r * 2, 0],",
            "    ['a', r, r, 0, 1, 0, -r * 2, 0],",
            "    // ['M', x + 2 - r, y - r],",
            "    // ['L', x + r - 2, y - r],",
            "    ['M', x, y - 2 * r + 2],",
            "    ['L', x, y - 2],",
            "];"
        ],
        "description": "自定义marker"
    },
    "g6-init-structure": {
        "prefix": "g6-init-structure",
        "body": [
            "// =============================================== header ===============================================",
            "import { _ } from 'framework/util';",
            "import G6, { Graph, NodeConfig, EdgeConfig } from '@antv/g6';",
            "import config from 'conf';",
            "import {",
            "    _,",
            "} from 'framework/Util';",
            "import registerNode from './node';",
            "import registerEdge from './edge';",
            "import registerLayout from './layout';",
            "import {",
            "    // nodeWidth,",
            "    // nodeHeight,",
            "    // vGap,",
            "} from './constant';",
            "",
            "const {",
            "    constant: {",
            "        organizeStructureGraphColors: {",
            "            // defaultEdgeColor,",
            "        },",
            "    }",
            "} = config;",
            "",
            "export interface GraphNode extends NodeConfig {",
            "    id: string;",
            "}",
            "",
            "export interface GraphEdge extends EdgeConfig {",
            "    source: string;",
            "    target: string;",
            "}",
            "",
            "interface IExpandGraphProps {",
            "    nodes: GraphNode[];",
            "    edges: GraphEdge[];",
            "}",
            "",
            "// =============================================== 静态属性 ===============================================",
            "",
            "graphRef: React.RefObject<HTMLDivElement>;",
            "",
            "graph: Graph;",
            "",
            "// ============================================= constructor =============================================",
            "this.graphRef = React.createRef<HTMLDivElement>();",
            "this.graph = undefined;",
            "",
            "// ========================================== componentDidMount ==========================================",
            "componentDidMount() {",
            "    const { nodes } = this.props;",
            "",
            "    if (!this.graph) {",
            "        this.renderGraph();",
            "        window.addEventListener('resize', _.debounce(this.handleWindowResize, 150), false);",
            "    }",
            "}",
            "",
            "// ========================================== componentDidUpdate ==========================================",
            "componentDidUpdate(prevProps: IExpandGraphProps) {",
            "    const { nodes: preNodes = [] } = prevProps;",
            "    const { nodes = [] } = this.props;",
            "",
            "    if (preNodes?.length !== nodes?.length) {",
            "        this.rerender();",
            "    }",
            "}",
            "",
            "// ======================================== componentWillUnmount ========================================",
            "componentWillUnmount() {",
            "    if (this.graph) {",
            "        this.graph.destroy();",
            "    }",
            "    this.graphRef = React.createRef<HTMLDivElement>();",
            "    this.graph = undefined;",
            "    window.removeEventListener('resize', this.handleWindowResize);",
            "}",
            "",
            "handleWindowResize = () => {",
            "    if (this.graph) {",
                    "const { width: containerWidth, height: containerHeight } = this.graphRef.current.getBoundingClientRect();",
            "        this.graph.changeSize(containerWidth, containerHeight);",
            "",
            "        // setTimeout(() => {",
            "        //     this.initZoom();",
            "        // });",
            "    }",
            "};",
            "",
            "// ============================================= bindEvents =============================================",
            "// 绑定事件",
            "bindEvents = () => {",
            "    this.graph.on('node:click', evt => {",
            "        const model = evt.item.getModel();",
            "        const { target: { cfg: { name: optType } } } = evt;",
            "",
            "        if (optType === 'mark-plus') {",
            "            // TODO",
            "        }",
            "    }",
            "};",
            "",
            "// ============================================ reRenderGraph ============================================",
            "// 重新渲染",
            "rerender = () => {",
            "    const { nodes } = this.props;",
            "",
            "    if (this.graph) {",
            "        this.graph.destroy();",
            "        this.graph = undefined;",
            "    }",
            "",
            "    if (nodes?.length) {",
            "        this.renderGraph();",
            "    }",
            "};",
            "",
            "// ============================================= renderGraph =============================================",
            "// 渲染画布",
            "renderGraph = () => {",
            "    const { data } = this.props",
            "    const { width: containerWidth, height: containerHeight } = this.graphRef.current.getBoundingClientRect();",
            "",
            "    registerNode();",
            "    registerEdge();",
            "    registerLayout();",
            "",
            "    this.graph = new G6.TreeGraph({",
            "        container: this.graphRef.current,",
            "        width: containerWidth,",
            "        height: containerHeight,",
            "        linkCenter: true,",
            "        animate: false,",
            "        maxZoom: 1,",
            "        modes: {",
            "            default: [",
            "                'drag-canvas',",
            "                'zoom-canvas',",
            "            ],",
            "        },",
            "        defaultNode: {",
            "            type: 'card-node',",
            "        },",
            "        defaultEdge: {",
            "            type: 'flow-line',",
            "            style: {",
            "                stroke: defaultEdgeColor,",
            "            },",
            "        },",
            "        layout: {",
            "            type: 'preset',",
            "        },",
            "    });",
            "",
            "    this.graph.data(data);",
            "    this.graph.render();",
            "    this.bindEvents();",
            "}",
            "",
            "// =============================================== render ===============================================",
            "<div className=\"expand-graph\" ref={this.graphRef} />"
        ],
        "description": "初始化结构"
    },
    "g6-instance-changeData": {
        "prefix": "g6-instance-changeData",
        "body": [
            "/**",
            " * 根据新的数据重新渲染视图",
            " * @param data 1. 包括nodes和edges的对象",
            " * @param data 2. 不指定该参数，则使用当前数据重新渲染",
            " */",
            "this.graph.changeData(data);"
        ],
        "description": "根据新的数据重新渲染视图"
    },
    "g6-instance-changeSize": {
        "prefix": "g6-instance-changeSize",
        "body": [
            "this.graph.changeSize(600, 350);"
        ],
        "description": "改变画布大小"
    },
    "g6-instance-fitCenter": {
        "prefix": "g6-instance-fitCenter",
        "body": [
            "this.graph.fitCenter();"
        ],
        "description": "平移图到中心将对齐到画布中心，但不缩放。优先级低于fitView"
    },
    "g6-instance-fitView": {
        "prefix": "g6-instance-fitView",
        "body": [
            "this.graph.fitView();"
        ],
        "description": "让画布内容适应视口"
    },
    "g6-instance-focusItem": {
        "prefix": "g6-instance-focusItem",
        "body": [
            "this.graph.focusItem(item, animate, animateCfg);",
            "graph.focusItem(item);",
            "",
            "// 动画地移动",
            "this.graph.focusItem(item, true);",
            "",
            "// 动画地移动，并配置动画",
            "this.graph.focusItem(item, true, {",
            "    easing: 'easeCubic',",
            "    duration: 400,",
            "});"
        ],
        "description": "使得item对齐到视口中心"
    },
    "g6-instance-getZoom": {
        "prefix": "g6-instance-getZoom",
        "body": [
            "this.graph.getZoom();"
        ],
        "description": "获取当前视口的缩放比例"
    },
    "g6-instance-layout": {
        "prefix": "g6-instance-layout",
        "body": [
            "/**",
            " * 重新以当前配置的属性进行一次布局",
            " */",
            "this.graph.layout();",
            "",
            "this.graph = new G6.Graph({",
            "    container: 'mountNode',",
            "    width: 1000,",
            "    height: 600,",
            "    layout: {",
            "        type: 'force',",
            "    },",
            "    modes: {",
            "        default: ['drag-node'],",
            "    },",
            "});",
            "",
            "this.graph.data({",
            "    nodes: data.nodes,",
            "    edges: data.edges.map((edge, i) => {",
            "        edge.id = 'edge' + i;",
            "        return Object.assign({}, edge);",
            "    }),",
            "});",
            "",
            "this.graph.render();",
            "",
            "function refreshDragedNodePosition(e) {",
            "    const model = e.item.get('model')",
            "    model.fx = e.x;",
            "    model.fy = e.y;",
            "};",
            "",
            "this.graph.on('node:dragstart', (e) => {",
            "    // 拖动节点时重新布局",
            "    this.graph.layout();",
            "    refreshDragedNodePosition(e);",
            "});",
            "",
            "this.graph.on('node:drag', (e) => {",
            "    refreshDragedNodePosition(e);",
            "});",
            "",
            "this.graph.on('node:dragend', (e) => {",
            "    e.item.get('model').fx = null;",
            "    e.item.get('model').fy = null;",
            "});"
        ],
        "description": "重新以当前配置的属性进行一次布局"
    },
    "g6-instance-moveTo": {
        "prefix": "g6-instance-moveTo",
        "body": [
            "this.graph.moveTo(x, y);"
        ],
        "description": "采用绝对位移将画布移动到指定坐标"
    },
    "g6-instance-paint-setAutoPaint": {
        "prefix": "g6-instance-paint-setAutoPaint",
        "body": [
            "/**",
            " * 仅重新绘制画布。当设置了元素样式或状态后，通过调用 paint() 方法，让修改生效",
            " * 一般批量操作时使用",
            " */",
            "const item = e.item;",
            "const autoPaint = this.graph.get('autoPaint');",
            "",
            "this.graph.setAutoPaint(false);",
            "this.graph.setItemState(item, 'selected', true);",
            "// graph.getNodes().forEach(function (node) {",
            "//     graph.clearItemStates(node);",
            "// });",
            "// graph.getEdges().forEach(function (edge) {",
            "//     graph.clearItemStates(edge);",
            "// });",
            "this.graph.paint();",
            "this.graph.setAutoPaint(autoPaint);"
        ],
        "description": "仅重新绘制画布"
    },
    "g6-instance-refresh": {
        "prefix": "g6-instance-refresh",
        "body": [
            "/**",
            " * 节点/边/Combo的数据项发生配置的变更时，根据新数据刷新视图",
            " * 节点/边/Combo数据的增删需要使用graph.addItem/graph.removeItem或graph.changeData",
            " */",
            "this.graph.refresh();"
        ],
        "description": "根据配置重新渲染视图"
    },
    "g6-instance-save": {
        "prefix": "g6-instance-save",
        "body": [
            "/**",
            " * 获取图数据",
            " * @returns {object} 1. 返回值包括所有节点和边",
            " * @returns {object} 2. { nodes: [], edges: [], groups: [], }",
            " */",
            "this.graph.save();"
        ],
        "description": "获取图数据"
    },
    "g6-instance-translate": {
        "prefix": "g6-instance-translate",
        "body": [
            "this.graph.translate(dx, dy);"
        ],
        "description": "采用相对位移来平移画布"
    },
    "g6-instance-zoom": {
        "prefix": "g6-instance-zoom",
        "body": [
            "/**",
            " * 改变相对缩放比例",
            " * @param {number} ratio 缩放比例",
            " * @param {{x, y}} center 如果为空,以元素当前位置为中心缩放",
            " */",
            "this.graph.zoom(ratio, { x: 100, y: 100 });"
        ],
        "description": "改变相对缩放比例"
    },
    "g6-instance-zoomTo": {
        "prefix": "g6-instance-zoomTo",
        "body": [
            "/**",
            " * 缩放视窗窗口到一个固定比例",
            " * @param toRatio 固定比例值",
            " * @param center 如果为空,以元素当前位置为中心缩放",
            " */",
            "this.graph.zoomTo(toRatio, { x: canvasX, y: canvasY });"
        ],
        "description": "缩放视窗窗口到一个固定比例"
    },
    "g6-layout-diy": {
        "prefix": "g6-layout-diy",
        "body": [
            "// https://antv-g6.gitee.io/zh/docs/api/registerLayout/#gatsby-focus-wrapper",
            "G6.registerLayout('my-radial', {",
            "    // 默认参数",
            "    getDefaultCfg: function getDefaultCfg() {",
            "        return {",
            "        };",
            "    },",
            "    execute() {",
            "        const self = {",
            "            ...this.getDefaultCfg(),",
            "            ...this,",
            "        };",
            "",
            "        // const self = this;",
            "        const nodes = self.nodes;",
            "    },",
            "});"
        ],
        "description": "自定义布局"
    },
    "g6-node-addItem": {
        "prefix": "g6-node-addItem",
        "body": [
            "// [元素配置项]https://g6.antv.vision/zh/docs/api/items/itemProperties",
            "/**",
            " * 新增元素（节点，边，或节点分组）",
            " * @param type node | edge | group",
            " * @model 元素的数据模型",
            " */",
            "this.graph.addItem(type, model);",
            "",
            "// =========== node ===========",
            "const model = {",
            "    id: 'node',",
            "    label: 'node',",
            "    type: 'circle',",
            "    size: 50,",
            "    address: 'cq',",
            "    x: 200,",
            "    y: 150,",
            "    style: {",
            "        fill: 'blue',",
            "    },",
            "};",
            "",
            "this.graph.addItem('node', model);",
            "",
            "// ========== group ==========",
            "// 当 type 为 'group' 时候，model 的数据结构如下：",
            "const model = {",
            "    groupId: 'xxx000999',",
            "    nodes: ['123', '23'],",
            "    type: 'rect',",
            "    zIndex: 0,",
            "    title: {",
            "        text: '名称',",
            "    },",
            "};",
            "",
            "graph.addItem('group', model);"
        ],
        "description": "新增元素（节点，边，或节点分组）"
    },
    "g6-node-data": {
        "prefix": "g6-node-data",
        "body": [
            "const data = {",
            "    id: 'node0',",
            "    type: 'circle',",
            "    size: 40,",
            "    label: 'node0',",
            "    visible: true,",
            "    labelCfg: {",
            "        positions: 'center',",
            "        style: {",
            "            fontSize: 12,",
            "            fill: '#fff',",
            "            opacity: 0.6,",
            "            stroke: 'grey',",
            "            // ...",
            "        }",
            "    },",
            "    style: {",
            "        fill: '#000',",
            "        stroke: '#888',",
            "        lineWidth: 1,",
            "        // ...",
            "    }",
            "};"
        ],
        "description": "node数据结构, 在数据中为每个节点和边指定 labelCfg 可以达到为不同节点或边定制不同文本样式的目的"
    },
    "g6-node-diy": {
        "prefix": "g6-node-diy",
        "body": [
            "/**",
            " * https://g6.antv.vision/zh/docs/api/Group",
            " * 功能: TODO",
            " * 作者: 郝海亮",
            " * 日期: $CURRENT_YEAR-$CURRENT_MONTH-$CURRENT_DATE",
            " */",
            "import G6 from '@antv/g6';",
            "import config from 'conf';",
            "import {",
            "    // nodeWidth,",
            "    // nodeHeight,",
            "} from './constant';",
            "import {",
            "    // createPlusOnly,",
            "} from './marker';",
            "",
            "const {",
            "    constant: {",
            "        organizeStructureGraphColors: {",
            "            // positionColor,",
            "            // headPortraitBoxBgColor,",
            "        },",
            "    }",
            "} = config;",
            "",
            "/**",
            " * 定义普通节点",
            " */",
            "export default () => {",
            "    G6.registerNode(",
            "        'card-node',",
            "        {",
            "            drawShape: function drawShape(cfg, group) {",
            "                // 容器",
            "                const shape = group.addShape('rect', {",
            "                    attrs: {",
            "                        x: 0,",
            "                        y: 0,",
            "                        width: nodeWidth,",
            "                        height: nodeHeight,",
            "                        // fill: outerBoxBgColor,",
            "                    },",
            "                    name: 'outer-box',",
            "                    // capture: true,",
            "                    draggable: true,",
            "                });",
            "",
            "                // 背景遮挡",
            "                let maskHeight = portraitRadius;",
            "                if (cfg.name && cfg.position) {",
            "                    maskHeight = nodeHeight;",
            "                } else if (cfg.name) {",
            "                    maskHeight = nodeHeight - 14;",
            "                }",
            "                group.addShape('rect', {",
            "                    attrs: {",
            "                        x: 0,",
            "                        y: 0,",
            "                        width: nodeWidth,",
            "                        height: maskHeight,",
            "                        fill: outerBoxBgColor,",
            "                    },",
            "                    name: 'mask-box',",
            "                    // draggable: true,",
            "                });",
            "",
            "                return shape;",
            "            },",
            "            setState(name, value, item) {",
            "                const group = item.get('group');",
            "                const keyShape = item.getKeyShape();",
            "                if (name == 'error') {",
            "                    // return item.attr('fill') === 'red'; // 找到首个填充为红色的图形",
            "                    const outerBox = group.find(ele => ele.get('name') === 'outer-box');",
            "                    const marker = group.find(ele => ele.get('name') === 'add-sub-node');",
            "                    if (value) {",
            "                        outerBox.attr('stroke', errorColor);",
            "                        marker.attr('stroke', errorColor);",
            "                    } else {",
            "                        outerBox.attr('stroke', outerBoxBorderColor);",
            "                        marker.attr('stroke', addNodeColor);",
            "                    }",
            "                } else if (name == 'active') {",
            "                    // do something",
            "                }",
            "            }",
            "        }",
            "    )",
            "};",
            "// =============================================== node.js ==============================================="
        ],
        "description": "初始化node"
    },
    "g6-node-removeItem": {
        "prefix": "g6-node-removeItem",
        "body": [
            "/**",
            " * 删除元素",
            " * @param item 1. 元素ID",
            " * @param item 2. 元素实例",
            " */",
            "const item = this.graph.findById('node');",
            "this.graph.removeItem(item);"
        ],
        "description": "删除元素"
    },
    "g6-node-traverse": {
        "prefix": "g6-node-traverse",
        "body": [
            "/**",
            " * 设置各个节点样式及其他配置，以及在各个状态下节点的KeyShape的样式",
            " * @param nodeFn 返回每个节点的配置",
            " */",
            "this.graph.node((node) => {",
            "    return {",
            "        id: node.id,",
            "        type: 'rect',",
            "        style: {",
            "            fill: 'blue',",
            "        },",
            "    };",
            "});"
        ],
        "description": "节点遍历"
    },
    "g6-node-type-circle": {
        "prefix": "g6-node-type-circle",
        "body": [
            "// [circle]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/built-in/circle",
            "// [stateStyles]https://g6.antv.vision/zh/docs/manual/middle/states/state#配置-state-样式",
            "// [anchorpoint]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/anchorpoint",
            "// [linkpoints]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/built-in/circle#linkpoints",
            "const data = {",
            "    nodes: [",
            "        {",
            "            id: 'node0',",
            "            type: 'circle',",
            "            size: '直径-圆心位置对应节点的位置',",
            "            color: '描边',",
            "            stateStyles: {},",
            "            linkPoints: {",
            "                top: true,",
            "                bottom: true,",
            "                left: true,",
            "                right: true,",
            "                fill: '#72cc4a',",
            "                size: 5, // 圆点的大小",
            "                stroke: '#72cc4a',",
            "                lineWidth: 1,",
            "            }, // 上下左右4个小圆点",
            "            icon: {",
            "                show: false,",
            "                width: 16,",
            "                height: 16,",
            "                img: 'imgURL',",
            "            },",
            "        },",
            "    ],",
            "};"
        ],
        "description": "节点类型-圆"
    },
    "g6-node-type-common-labelcfg": {
        "prefix": "g6-node-type-common-labelcfg",
        "body": [
            "// https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/defaultNode#标签文本-label-及其配置--labelcfg",
            "// [节点标签和边标签共有属性]https://g6.antv.vision/zh/docs/api/shapeProperties#文本-text",
            "this.graph = new G6.Graph({",
            "    defaultNode: {",
            "        labelCfg: {",
            "            position: 'center | top | left | right | bottom', // 默认center - 文本相对于节点的位置",
            "            offset: 'number', // position为bottom时，文本的上方偏移量; position为left, 文本的右方偏移量",
            "            style: {",
            "                fill: '文本颜色',",
            "                stroke: '文本描边颜色',",
            "                lineWidth: '文本描边粗细',",
            "                opacity: '文本透明度',",
            "                fontFamily: '文本字体',",
            "                fontSize: '文本字体大小',",
            "",
            "                background: {",
            "                    fill: '#ffffff',",
            "                    stroke: '#9EC9FF',",
            "                    padding: [2, 2, 2, 2],",
            "                    radius: 2,",
            "                },",
            "            },",
            "        }",
            "    }",
            "});"
        ],
        "description": "标签文本label及其配置labelCfg"
    },
    "g6-node-type-common-prop": {
        "prefix": "g6-node-type-common-prop",
        "body": [
            "// https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/defaultNode#节点的通用属性",
            "// https://antv-g6.gitee.io/zh/docs/manual/middle/elements/nodes/anchorpoint",
            "const data = {",
            "    nodes: [",
            "        {",
            "            id: 'string',",
            "            x: 'number',",
            "            y: 'number',",
            "            type: 'circle', // circle | rect",
            "            size: 'number | array',",
            "            anchorPoints: [0, 1],",
            "            style: {}, // 节点的样式属性",
            "            label: '文本文字',",
            "            labelCfg: {}, // 文本配置项",
            "        },",
            "    ],",
            "};"
        ],
        "description": "节点的通用属性"
    },
    "g6-node-type-common-style": {
        "prefix": "g6-node-type-common-style",
        "body": [
            "https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/defaultNode#样式属性-style",
            "const data = {",
            "    nodes: [",
            "        {",
            "            style: {",
            "                fill: '节点填充色',",
            "                stroke: '节点的描边颜色',",
            "                lineWidth: '描边宽度',",
            "                opacity: '设置绘图的当前 alpha 或透明值',",
            "                fillOpacity: '设置填充的 alpha 或透明值',",
            "                cursor: 'pointer',",
            "            },",
            "        },",
            "    ],",
            "};"
        ],
        "description": "公共的样式属性"
    },
    "g6-node-type-image": {
        "prefix": "g6-node-type-image",
        "body": [
            "// [imgage]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/built-in/image",
            "const data = {",
            "    nodes: [",
            "        {",
            "            ...commonProps,",
            "            img,",
            "            clipCfg: { // 裁剪图片",
            "                show: true, // 是否启用裁剪功能, 默认不裁剪 [default: false]",
            "                type, // circle | rect | ellipse",
            "                // circle",
            "                r,",
            "                // rect",
            "                width,",
            "                height,",
            "                // ellipse",
            "                rx,",
            "                ry,",
            "            }",
            "        },",
            "    ],",
            "};"
        ],
        "description": "节点类型-图像"
    },
    "g6-node-type-rect": {
        "prefix": "g6-node-type-rect",
        "body": [
            "// [rect]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/built-in/rect",
            "// [linkpoints]https://g6.antv.vision/zh/docs/manual/middle/elements/nodes/built-in/rect#linkpoints",
            "const data = {",
            "    nodes: [",
            "        {",
            "            id: 'node0',",
            "            type: 'rect',",
            "            size: [35, 20], // 矩形的中心位置是节点的位置，而不是左上角",
            "            color: '描边',",
            "            stateStyles: {}, // 只对 keyShape 起作用",
            "            style: {",
            "                radius: '圆角半径',",
            "            },",
            "            linkPoints: {",
            "                top: true,",
            "                bottom: true,",
            "                left: true,",
            "                right: true,",
            "                size: 5, // 圆点的大小",
            "                fill: '#fff',",
            "            },",
            "        },",
            "    ],",
            "};"
        ],
        "description": "节点类型-矩形"
    },
    "g6-node-updateItem": {
        "prefix": "g6-node-updateItem",
        "body": [
            "/**",
            " * 更新元素，包括更新数据、样式、文本等",
            " * @param item 元素ID或元素实例",
            " * @param model ",
            " */",
            "this.graph.updateItem(item, model);",
            "",
            "this.graph.updateItem(item, {",
            "    id: 'node',",
            "    label: 'node',",
            "    address: 'cq',",
            "    x: 200,",
            "    y: 150,",
            "    style: {",
            "        stroke: 'green',",
            "        'node-text': {",
            "            stroke: 'yellow',",
            "        },",
            "    },",
            "    stateStyles: {",
            "        hover: {",
            "            opacity: 0.1,",
            "            'node-text': {",
            "                stroke: 'blue',",
            "            },",
            "        },",
            "    },",
            "});",
            "",
            "const hasActived = item.hasState('active');",
            "if (!hasActived) {",
            "    this.graph.setItemState(item, 'hover', true);",
            "}"
        ],
        "description": "更新默认样式&状态样式"
    },
    "g6-nodeInstance-getParent": {
        "prefix": "g6-nodeInstance-getParent",
        "body": [
            "nodeInstance.get('parent');"
        ],
        "description": "获取tree node instance的parent实例"
    },
    "g6-nodeOrEdge-changeVisibility": {
        "prefix": "g6-nodeOrEdge-changeVisibility",
        "body": [
            "/**",
            " * 更改元素是否显示",
            " * @param 1. true 显示",
            " * @param 2. false 隐藏",
            " */",
            "item.changeVisibility(visible);",
            "",
            "// 显示元素",
            "item.changeVisibility(true);",
            "",
            "// 隐藏元素",
            "item.changeVisibility(false);"
        ],
        "description": "更改元素是否显示"
    },
    "g6-nodeOrEdge-clearCache": {
        "prefix": "g6-nodeOrEdge-clearCache",
        "body": [
            "/**",
            " * 更新或刷新等操作后，清除缓存",
            " */",
            "item.clearCache();"
        ],
        "description": "清除缓存"
    },
    "g6-nodeOrEdge-clearStates": {
        "prefix": "g6-nodeOrEdge-clearStates",
        "body": [
            "/**",
            " * 清除指定的状态",
            " * 如果不传states，则默认清除第一个状态",
            " * @param {string|array} states 要清除的元素状态名",
            " */",
            "item.clearStates(states);",
            "",
            "// 清除 'selected' 状态",
            "item.clearStates('selected');",
            "",
            "// 清除 'active' 与 'hover' 状态",
            "item.clearStates(['actived', 'hover']);"
        ],
        "description": "清除指定的状态"
    },
    "g6-nodeOrEdge-enableCapture": {
        "prefix": "g6-nodeOrEdge-enableCapture",
        "body": [
            "/**",
            " * 是否拾取及触发该元素的交互事件",
            " * @param enable 1. true允许触发",
            " * @param enable 2. false允许触发",
            " */",
            "item.enableCapture(enable);",
            "",
            "// 不允许元素响应事件",
            "item.enableCapture(false);",
            "",
            "// 允许元素响应事件",
            "item.enableCapture(true);"
        ],
        "description": "是否拾取及触发该元素的交互事件"
    },
    "g6-nodeOrEdge-fresh": {
        "prefix": "g6-nodeOrEdge-fresh",
        "body": [
            "/**",
            " * 刷新元素，包括更新元素位置，更新元素样式，清除之前的缓存",
            " * 一般在以下情况时，会刷新元素",
            " * 1. itemmodel被改变",
            " * 2. 边的位置发生改变，需要重新计算边",
            " */",
            "item.refresh();"
        ],
        "description": "刷新元素"
    },
    "g6-nodeOrEdge-getBBox": {
        "prefix": "g6-nodeOrEdge-getBBox",
        "body": [
            "/**",
            " * 获取元素的包围盒",
            " * @returns {{",
            " *     x, // 视口x坐标",
            " *     y, // 视口y坐标",
            " *     width, // bbox宽度",
            " *     height, // bbox高度",
            " *     centerX, // 中心点x坐标",
            " *     centerY, // 中心点y坐标",
            " * }}",
            " */",
            "item.getBBox();"
        ],
        "description": "获取元素的包围盒"
    },
    "g6-nodeOrEdge-getContainer": {
        "prefix": "g6-nodeOrEdge-getContainer",
        "body": [
            "/**",
            " * 获取元素的容器",
            " */",
            "item.getContainer();",
            "",
            "// 获取元素的容器",
            "const group = item.getContainer();",
            "",
            "// 等价于",
            "const group = item.get('group');"
        ],
        "description": "获取元素的容器"
    },
    "g6-nodeOrEdge-getCurrentStatesStyle": {
        "prefix": "g6-nodeOrEdge-getCurrentStatesStyle",
        "body": [
            "/**",
            " * 获取当前元素的所有状态的样式",
            " */",
            "item.getCurrentStatesStyle();",
            "",
            "const styles = item.getCurrentStatesStyle();"
        ],
        "description": "todo"
    },
    "g6-nodeOrEdge-getID": {
        "prefix": "g6-nodeOrEdge-getID",
        "body": [
            "const id = item.getID();"
        ],
        "description": "获取元素的ID"
    },
    "g6-nodeOrEdge-getKeyShape": {
        "prefix": "g6-nodeOrEdge-getKeyShape",
        "body": [
            "/**",
            " * 获取元素的关键形状，用于计算节点大小、连线截距等",
            " */",
            "item.getKeyShape();",
            "",
            "// 获取元素的 keyShape",
            "const keyShape = item.getKeyShape();",
            "",
            "// 等价于",
            "const keyShape = item.get('keyShape');"
        ],
        "description": "获取元素的关键形状"
    },
    "g6-nodeOrEdge-getModel": {
        "prefix": "g6-nodeOrEdge-getModel",
        "body": [
            "/**",
            " * 获取元素的数据模型",
            " */",
            "item.getModel()",
            "",
            "// 获取元素的数据模型",
            "const model = item.getModel();",
            "",
            "// 等价于",
            "const model = item.get('model');"
        ],
        "description": "获取元素的数据模型"
    },
    "g6-nodeOrEdge-getOriginStyle": {
        "prefix": "g6-nodeOrEdge-getOriginStyle",
        "body": [
            "/**",
            " * 获取元素keyShape的样式",
            " */",
            "item.getOriginStyle();",
            "",
            "const style = item.getOriginStyle();"
        ],
        "description": "获取元素keyShape的样式"
    },
    "g6-nodeOrEdge-getStates": {
        "prefix": "g6-nodeOrEdge-getStates",
        "body": [
            "/**",
            " * 获取当前元素的所有状态",
            " * @returns {array}",
            " * 返回当前元素的所有状态，是一个字符串数组，数组中值表示元素的状态",
            " */",
            "item.getStates();",
            "",
            "// 获取元素的所有状态",
            "const states = item.getStates();"
        ],
        "description": "获取当前元素的所有状态"
    },
    "g6-nodeOrEdge-getStateStyle": {
        "prefix": "g6-nodeOrEdge-getStateStyle",
        "body": [
            "/**",
            " * 获取元素指定状态的样式",
            " * 返回的样式会将全局样式、默认样式和元素自定义样式合并",
            " * @param state 元素的状态名",
            " */",
            "item.getStateStyle(state);",
            "",
            "// 获取元素的指定状态的样式",
            "const style = item.getStateStyle('selected');"
        ],
        "description": "获取元素指定状态的样式"
    },
    "g6-nodeOrEdge-getType": {
        "prefix": "g6-nodeOrEdge-getType",
        "body": [
            "/**",
            " * 获取元素的类型",
            " * @returns node | edge",
            " */",
            "item.getType();",
            "",
            "// 获取元素的类型",
            "const type = item.getType();",
            "",
            "// 等价于",
            "const type = item.get('type');"
        ],
        "description": "获取元素的类型"
    },
    "g6-nodeOrEdge-hasState": {
        "prefix": "g6-nodeOrEdge-hasState",
        "body": [
            "/**",
            " * 判断元素是否具有某种指定的状态",
            " * @param state 元素的状态名",
            " * @returns {bool}",
            " */",
            "item.hasState(state);",
            "",
            "this.graph.updateItem(item, {",
            "    id: 'node',",
            "    label: 'node',",
            "    address: 'cq',",
            "    x: 200,",
            "    y: 150,",
            "    style: {",
            "        stroke: 'green',",
            "        'node-text': {",
            "            stroke: 'yellow',",
            "        },",
            "    },",
            "    stateStyles: {",
            "        hover: {",
            "            opacity: 0.1,",
            "            'node-text': {",
            "                stroke: 'blue',",
            "            },",
            "        },",
            "    },",
            "});",
            "",
            "const hasActived = item.hasState('active');",
            "if (!hasActived) {",
            "    this.graph.setItemState(item, 'hover', true);",
            "}"
        ],
        "description": "判断元素是否具有某种指定的状态"
    },
    "g6-nodeOrEdge-hide": {
        "prefix": "g6-nodeOrEdge-hide",
        "body": [
            "/**",
            " * 隐藏元素",
            " * 只隐藏item自身，若需要在隐藏节点的同时隐藏相关边，应调用graph.hideItem(item)",
            " */",
            "item.hide();",
            "graph.paint();"
        ],
        "description": "隐藏元素"
    },
    "g6-nodeOrEdge-hideItem": {
        "prefix": "g6-nodeOrEdge-hideItem",
        "body": [
            "/**",
            " * 1. 边的隐藏",
            " * 2. 节点及关联边的隐藏",
            " * @param item 元素ID或元素实例",
            " */",
            "this.graph.hideItem(item);",
            "",
            "// 通过 ID 查询节点实例",
            "const item = graph.findById('nodeId');",
            "graph.hideItem(item);",
            "",
            "// 等价于",
            "graph.hideItem('nodeId');",
            "graph.paint();"
        ],
        "description": "边、节点及相关边的隐藏"
    },
    "g6-nodeOrEdge-isVisible": {
        "prefix": "g6-nodeOrEdge-isVisible",
        "body": [
            "/**",
            " * 查询元素显示状态",
            " * @returns {bool} 1. true 显示",
            " * @returns {bool} 2. false 隐藏",
            " */",
            "item.isVisible();"
        ],
        "description": "查询元素显示状态"
    },
    "g6-nodeOrEdge-setState": {
        "prefix": "g6-nodeOrEdge-setState",
        "body": [
            "/**",
            " * 更新元素的状态",
            " * @param state 元素的状态名[eg: selected | hover]",
            " * @param {bool} enable",
            " */",
            "item.setState(state, enable);",
            "",
            "item.setState('selected', true);",
            "item.setState('actived', false);"
        ],
        "description": "更新元素的状态"
    },
    "g6-nodeOrEdge-show": {
        "prefix": "g6-nodeOrEdge-show",
        "body": [
            "/**",
            " * 只显示item自身",
            " * 显示元素。只显示item自身，若需要在显示节点的同时显示相关边，应调用graph.showItem(item)",
            " */",
            "item.show();",
            "graph.paint();"
        ],
        "description": "只显示item自身"
    },
    "g6-nodeOrEdge-showItem": {
        "prefix": "g6-nodeOrEdge-showItem",
        "body": [
            "/**",
            " * 1. 边的显示",
            " * 2. 节点及关联边的显示",
            " * @param item 元素ID或元素实例",
            " */",
            "this.graph.showItem(item);",
            "",
            "// 通过 ID 查询节点实例",
            "const item = graph.findById('nodeId');",
            "graph.showItem(item);",
            "",
            "// 等价于",
            "graph.showItem('nodeId');",
            "graph.paint();"
        ],
        "description": "边、节点及相关边的显示"
    },
    "g6-nodeOrEdge-toBack": {
        "prefix": "g6-nodeOrEdge-toBack",
        "body": [
            "/**",
            " * 置底",
            " * 将元素的层级设置到最下层，即当有元素重叠时，将元素置于底层",
            " * 更改层级后需要重新绘制图",
            " */",
            "item.toBack();",
            "graph.paint();"
        ],
        "description": "置底"
    },
    "g6-nodeOrEdge-toFront": {
        "prefix": "g6-nodeOrEdge-toFront",
        "body": [
            "/**",
            " * 置顶",
            " * 将元素的层级设置到最上层，即当有元素重叠时，将元素置于顶层",
            " * 更改层级后需要重新绘制图",
            " */",
            "item.toFront();",
            "graph.paint();"
        ],
        "description": "置顶"
    },
    "g6-nodeOrEdge-update": {
        "prefix": "g6-nodeOrEdge-update",
        "body": [
            "// [元素配置项]https://g6.antv.vision/zh/docs/api/items/itemProperties",
            "/**",
            " * 根据元素数据项，更新元素",
            " * @param model 包括数据和样式、文本",
            " */",
            "item.update(model);",
            "",
            "const model = {",
            "    id: 'node',",
            "    type: 'rect',",
            "    label: 'node',",
            "    style: {",
            "        fill: 'red',",
            "    },",
            "    label: 'label',",
            "    labelCfg: {},",
            "};",
            "",
            "item.update(model);"
        ],
        "description": "根据元素数据项，更新元素"
    },
    "g6-nodeOrEdge-updatePosition": {
        "prefix": "g6-nodeOrEdge-updatePosition",
        "body": [
            "/**",
            " * 更新元素位置，避免整体重新绘制",
            " * @param cfg 位置信息",
            " */",
            "item.updatePosition(cfg);",
            "",
            "// =========== 场景1 ===========",
            "const cfg = {",
            "    x: 100,",
            "    y: 200,",
            "};",
            "// 由于 cfg 中存在 x 与 y，则下面操作将会使用 cfg 中的 x、y 坐标",
            "item.updatePosition(cfg);",
            "// 重新计算边",
            "this.graph.refresh();",
            "",
            "// =========== 场景2 ===========",
            "const cfg1 = {",
            "    name: 'abc',",
            "    dept: 'antv',",
            "};",
            "// 由于 cfg 中不存在 x 与 y，下面才做将会使用 item.getModel() 中的 x、y 坐标值",
            "item.updatePosition(cfg1);",
            "// 重新计算边",
            "this.graph.refresh();"
        ],
        "description": "更新元素位置"
    },
    "g6-options-animate": {
        "prefix": "g6-options-animate",
        "body": [
            "// https://antv-g6.gitee.io/zh/docs/manual/middle/animation",
            "this.graph = new G6.Graph({",
            "    animate: true,",
            "    animateCfg: {",
            "        duration: 500,",
            "        easing: 'linearEasing',",
            "    },",
            "});"
        ],
        "description": "动画"
    },
    "g6-options-defaultEdge": {
        "prefix": "g6-options-defaultEdge",
        "body": [
            "this.graph = new G6.Graph({",
            "    defaultEdge: {",
            "        type: 'polyline',",
            "        color: '#000',",
            "        style: {",
            "            ......",
            "        }",
            "    }",
            "});"
        ],
        "description": "默认边"
    },
    "g6-options-defaultNode": {
        "prefix": "g6-options-defaultNode",
        "body": [
            "this.graph = new G6.Graph({",
            "    defaultNode: {",
            "        type: 'circle',",
            "        color: '#000',",
            "        style: {",
            "            // TODO",
            "        }",
            "    }",
            "});"
        ],
        "description": "默认节点"
    },
    "g6-options-edgeStateStyles": {
        "prefix": "g6-options-edgeStateStyles",
        "body": [
            "this.graph = new G6.Graph({",
            "    edgeStateStyles: {",
            "        click: {",
            "            fill: 'lightsteelblue',",
            "            stroke: '#000',",
            "            lineWidth: 3,",
            "        },",
            "        hover: {",
            "            // TODO",
            "        },",
            "        select: {",
            "            // TODO",
            "        }",
            "    }",
            "});",
            ""
        ],
        "description": "边状态"
    },
    "g6-options-fitCenter": {
        "prefix": "g6-options-fitCenter",
        "body": [
            "this.graph = new G6.Graph({",
            "    fitCenter: true,",
            "});"
        ],
        "description": "移到画布中心"
    },
    "g6-options-fitView": {
        "prefix": "g6-options-fitView",
        "body": [
            "this.graph = new G6.Graph({",
            "    fitView: true,",
            "});"
        ],
        "description": "适配画布大小"
    },
    "g6-options-fitViewPadding": {
        "prefix": "g6-options-fitViewPadding",
        "body": [
            "this.graph = new G6.Graph({",
            "    fitViewPadding: [ 20, 40, 50, 20 ],",
            "});"
        ],
        "description": "画布四周留白"
    },
    "g6-options-linkCenter": {
        "prefix": "g6-options-linkCenter",
        "body": [
            "this.graph = new G6.Graph({",
            "    linkCenter: true,",
            "});"
        ],
        "description": "指定边是否连入节点的中心"
    },
    "g6-options-mode": {
        "prefix": "g6-options-mode",
        "body": [
            "[交互模式]https://g6.antv.vision/zh/docs/manual/middle/states/mode",
            "[使用多种交互模式]https://g6.antv.vision/zh/docs/manual/advanced/mode-and-custom-behavior",
            "[内置Behavior]https://g6.antv.vision/zh/docs/manual/middle/states/defaultBehavior",
            "[自定义交互Behavior]https://g6.antv.vision/zh/docs/manual/middle/states/custom-behavior",
            "this.graph = new G6.Graph({",
            "    modes: {",
            "        default: [",
            "            {",
            "                type: 'collapse-expand',",
            "                // onChange: function onChange(item, collapsed) {",
            "                //     // 场景1",
            "                //     const icon = item.get('group').findByClassName('collapse-icon')",
            "                //     if (collapsed) {",
            "                //         icon.attr('symbol', EXPAND_ICON)",
            "                //     } else {",
            "                //         icon.attr('symbol', COLLAPSE_ICON)",
            "                //     }",
            "",
            "                //     // 场景2",
            "                //     const data = item.get('model').data",
            "                //     data.collapsed = collapsed",
            "                //     return true",
            "                // },",
            "                shouldBegin: e => {",
            "                    if (e.target.get('name') === 'drag-box') {",
            "                        return true;",
            "                    }",
            "                    return false;",
            "                },",
            "            },",
            "            'drag-canvas',",
            "            'zoom-canvas',",
            "            'drag-node',",
            "            {",
            "                type: 'create-edge',",
            "                trigger: 'drag' // click | drag [default: click]",
            "                // key: 'shift' // shift | control | ctrl | meta | alt [default: undefined]",
            "            }",
            "        ],",
            "        addNode: ['click-add-node', 'click-select'],",
            "        addEdge: ['click-add-edge', 'click-select'],",
            "    },",
            "});",
            "",
            "// ===== registerBehavior =====",
            "// 添加的节点数量，用于生成唯一 id",
            "let addedNodeCount = 0;",
            "",
            "// 封装点击添加节点的交互",
            "G6.registerBehavior('click-add-node', {",
            "    // 设定该自定义行为需要监听的事件及其响应函数",
            "    getEvents() {",
            "        // 监听的事件为 canvas:click，响应函数是 onClick",
            "        return {",
            "            'canvas:click': 'onClick',",
            "        };",
            "    },",
            "    // 点击事件",
            "    onClick(evt) {",
            "        const graph = this.graph;",
            "        // 在图上新增一个节点",
            "        const node = this.graph.addItem('node', {",
            "            x: evt.canvasX,",
            "            y: evt.canvasY,",
            "            id: `node-addedNodeCount`, // 生成唯一的 id",
            "        });",
            "        addedNodeCount++;",
            "    },",
            "});",
            "",
            "// ===== registerBehavior =====",
            "// 封装点击添加边的交互",
            "G6.registerBehavior('click-add-edge', {",
            "    // 设定该自定义行为需要监听的事件及其响应函数",
            "    getEvents() {",
            "        return {",
            "            'node:click': 'onClick', // 监听事件 node:click，响应函数是 onClick",
            "            mousemove: 'onMousemove', // 监听事件 mousemove，响应函数是 onMousemove",
            "            'edge:click': 'onEdgeClick', // 监听事件 edge:click，响应函数是 onEdgeClick",
            "        };",
            "    },",
            "    // getEvents 中定义的 'node:click' 的响应函数",
            "    onClick(evt) {",
            "        const node = evt.item;",
            "        const graph = this.graph;",
            "        // 鼠标当前点击的节点的位置",
            "        const point = { x: evt.x, y: evt.y };",
            "        const model = node.getModel();",
            "        if (this.addingEdge && this.edge) {",
            "            graph.updateItem(this.edge, {",
            "                target: model.id,",
            "            });",
            "",
            "            this.edge = null;",
            "            this.addingEdge = false;",
            "        } else {",
            "            // 在图上新增一条边，结束点是鼠标当前点击的节点的位置",
            "            this.edge = graph.addItem('edge', {",
            "                source: model.id,",
            "                target: point,",
            "            });",
            "            this.addingEdge = true;",
            "        }",
            "    },",
            "    // getEvents 中定义的 mousemove 的响应函数",
            "    onMousemove(evt) {",
            "        // 鼠标的当前位置",
            "        const point = { x: evt.x, y: evt.y };",
            "        if (this.addingEdge && this.edge) {",
            "            // 更新边的结束点位置为当前鼠标位置",
            "            this.graph.updateItem(this.edge, {",
            "                target: point,",
            "            });",
            "        }",
            "    },",
            "    // getEvents 中定义的 'edge:click' 的响应函数",
            "    onEdgeClick(evt) {",
            "        const currentEdge = evt.item;",
            "        // 拖拽过程中，点击会点击到新增的边上",
            "        if (this.addingEdge && this.edge == currentEdge) {",
            "            graph.removeItem(this.edge);",
            "            this.edge = null;",
            "            this.addingEdge = false;",
            "        }",
            "    },",
            "});",
            "",
            "this.graph.setMode(modeType);"
        ],
        "description": "行为模式的集合"
    },
    "g6-options-nodeStateStyles": {
        "prefix": "g6-options-nodeStateStyles",
        "body": [
            "this.graph = new G6.Graph({",
            "    nodeStateStyles: {",
            "        click: {",
            "            'sub-element': {",
            "                fill: 'lightsteelblue',",
            "                stroke: '#000',",
            "                lineWidth: 3,",
            "            },",
            "            'text-element': {",
            "                stroke: 'red',",
            "            },",
            "        },",
            "        hover: {",
            "            // TODO",
            "        },",
            "        select: {",
            "            // TODO",
            "        },",
            "        'bodyState:healthy': {",
            "            fill: 'green',",
            "        },",
            "        'bodyState:suspect': {},",
            "        'bodyState:ill': {},",
            "    }",
            "});",
            "",
            "this.graph.setItemState(item, 'click', true);",
            "this.graph.setItemState(item, 'bodyState', 'healthy');"
        ],
        "description": "默认节点状态"
    },
    "g6-options-zoom": {
        "prefix": "g6-options-zoom",
        "body": [
            "this.graph = new G6.Graph({",
            "    minZoom: 0.2, // 最小缩放比例,",
            "    maxZoom: 10, // 最大缩放比例,",
            "});"
        ],
        "description": "图谱最大最小缩放比例"
    },
    "g6-search-find": {
        "prefix": "g6-search-find",
        "body": [
            "/**",
            " * 根据具体规则查找单个元素",
            " * @param type node | edge",
            " * @fn 查找的规则",
            " * @returns 返回第一个匹配的元素实例 | undefined",
            " */",
            "this.graph.find(type, fn);",
            "",
            "const findNode = this.graph.find('node', (node) => {",
            "    return node.get('model').x === 100;",
            "});"
        ],
        "description": "根据具体规则查找单个元素"
    },
    "g6-search-findAll": {
        "prefix": "g6-search-findAll",
        "body": [
            "/**",
            " * 查询所有满足规则的元素",
            " * @param type node | edge",
            " * @param fn 查找的规则",
            " * @returns 所有元素实例 | undefined",
            " */",
            "this.graph.findAll(type, fn);",
            "",
            "const nodes = this.graph.findAll('node', (node) => {",
            "    return node.get('model').x;",
            "});"
        ],
        "description": "查询所有满足规则的元素"
    },
    "g6-search-findAllByState": {
        "prefix": "g6-search-findAllByState",
        "body": [
            "/**",
            " * 查找所有处于指定状态的元素",
            " * @param type node | edge",
            " * @param state 状态名称",
            " * @returns 所有指定状态的元素实例 | undefined",
            " */",
            "this.graph.findAllByState(type, state);",
            "",
            "// 查询所有选中的元素",
            "const nodes = this.graph.findAllByState('node', 'selected');"
        ],
        "description": "查找所有处于指定状态的元素"
    },
    "g6-search-findById": {
        "prefix": "g6-search-findById",
        "body": [
            "/**",
            " * 查询对应的元素实例",
            " * @param id 元素ID",
            " * @returns 该元素实例 | undefined",
            " */",
            "this.graph.findById(id);",
            "",
            "const node = this.graph.findById('node');"
        ],
        "description": "查询对应的元素实例"
    },
    "g6-search-getEdges": {
        "prefix": "g6-search-getEdges",
        "body": [
            "/**",
            " * 获取图中所有边的实例",
            " * 这里返回的是边的实例，而不是边的数据项",
            " * @returns {array} 所有边的实例",
            " */",
            "this.graph.getEdges();"
        ],
        "description": "获取图中所有边的实例"
    },
    "g6-search-getNodes": {
        "prefix": "g6-search-getNodes",
        "body": [
            "/**",
            " * 获取图中所有节点的实例",
            " * 这里返回的是节点的实例，而不是节点的数据项",
            " * @returns {array} 所有节点的实例",
            " */",
            "this.graph.getNodes();"
        ],
        "description": "获取图中所有节点的实例"
    },
    "g6-shape-type-circle": {
        "prefix": "g6-shape-type-circle",
        "body": [
            "没有独有的全是通用的"
        ],
        "description": "圆Shape独有的样式"
    },
    "g6-shape-type-common-func": {
        "prefix": "g6-shape-type-common-func",
        "body": [
            "/**",
            " * 获取实例的属性值",
            " */",
            "const width = shape.attr('width');",
            "",
            "/**",
            " * 批量更新实例绘图属性",
            " */",
            "shape.attr({",
            "    fill: '#999',",
            "    stroke: '#666'",
            "});",
            "",
            "/**",
            " * 设置并返回裁剪对象",
            " * @param type 裁剪的图片形状",
            " * @param x 裁剪图形的x坐标",
            " * @param y 裁剪图形的y坐标",
            " * @param show 是否启用裁剪功能",
            " * @param r 剪裁圆形的半径",
            " * @param width 剪裁矩形的宽度",
            " * @param height 剪裁矩形的高度",
            " * @param rx 剪裁椭圆的长轴半径",
            " * @param ry 剪裁椭圆的短轴半径",
            " */",
            "shape.setClip({",
            "    type, // circle | rect | ellipse | Polygon | path [含自定义]",
            "    attrs: {",
            "        r: 10,",
            "        x, // circle | rect | ellipse时生效",
            "        y,",
            "        show, // 默认不启用",
            "        r, // circle时生效",
            "        width, // rect时生效",
            "        height,",
            "        rx, // ellipse时生效",
            "        ry,",
            "    },",
            "});",
            "",
            "/**",
            " * 获取裁剪对象",
            " */",
            "shape.getClip();"
        ],
        "description": "各图形的通用方法"
    },
    "g6-shape-type-common-prop": {
        "prefix": "g6-shape-type-common-prop",
        "body": [
            "/**",
            " * https://antv-g6.gitee.io/zh/docs/manual/middle/elements/shape/shape-and-properties#%E5%90%84%E5%9B%BE%E5%BD%A2-shape-%E7%9A%84%E9%80%9A%E7%94%A8%E5%B1%9E%E6%80%A7",
            " * 图形样式通用属性",
            " * @param capture 该图形是否可以被鼠标事件捕捉到，即是否能够响应各鼠标事件。非必须指定",
            " * @param visible 该图形是否可见",
            " * @param draggable 图形是否允许被拖拽,响应drag行为",
            " * @param zIndex 该图形的视觉层次",
            " */",
            "group.addShape('circle', {",
            "    attrs: {",
            "        x,",
            "        y,",
            "        r,",
            "        fill, // 填充色",
            "        stroke, // 笔触色",
            "        lineWidth, // 边宽",
            "        lineDash: [1, 2], // 虚线",
            "        shadowColor, // 阴影",
            "        shadowBlur, // 阴影的模糊级别，数值越大，越模糊",
            "        shadowOffsetX, // 阴影距形状的水平距离",
            "        shadowOffsetY, // 阴影距形状的垂直距离",
            "        opacity,",
            "        fillOpacity, // 填充透明值,优先级高于opacity",
            "        strokeOpacity, // 描边透明值,优先级高于opacity",
            "        cursor,",
            "    },",
            "    name: 'circle-shape',",
            "    capture, // bool",
            "    visible, // true [default]",
            "    draggable, // bool",
            "    zIndex, // 调用group.sort()可以对组内所有图形根据各自zIndex进行视觉层次的排序",
            "});"
        ],
        "description": "图形样式通用属性"
    },
    "g6-shape-type-image": {
        "prefix": "g6-shape-type-image",
        "body": [
            "group.addShape('image', {",
            "    attrs: {",
            "        x: 0,",
            "        y: 0,",
            "        width,",
            "        height,",
            "        img: imgUrl,",
            "    },",
            "    name: 'image-shape',",
            "});"
        ],
        "description": "image Shape独有的样式"
    },
    "g6-shape-type-marker": {
        "prefix": "g6-shape-type-marker",
        "body": [
            "// 使用内置 symbol",
            "group.addShape('marker', {",
            "    attrs: {",
            "        x: 10,",
            "        y: 10,",
            "        r: 10,",
            "        symbol: 'triangle-down', // 内置: circle | square | diamond | triangle | triangle-down",
            "    },",
            "    name: 'marker-shape',",
            "});",
            "",
            "// 使用路径自定义 symbol",
            "group.addShape('marker', {",
            "    attrs: {",
            "        x: 10,",
            "        y: 10,",
            "        r: 10,",
            "        symbol: function (x, y, r) {",
            "            return [['M', x, y], ['L', x + r, y + r], ['L', x + r * 2, y], ['Z']]",
            "        },",
            "    },",
            "    name: 'marker-shape',",
            "});"
        ],
        "description": "marker Shape独有的样式"
    },
    "g6-shape-type-path": {
        "prefix": "g6-shape-type-path",
        "body": [
            "/**",
            " * @param startArrow true为默认箭头",
            " * @param endArrow true为默认箭头",
            " * @param lineAppendWidth 边的击中范围。提升边的击中范围",
            " * @param lineCap 线条的结束端点样式",
            " * @param lineJoin 设置两条线相交时，所创建的拐角形状",
            " * @param lineWidth 设置当前的线条宽度",
            " * @param miterLimit 最大斜接长度",
            " * @param lineDash 虚线样式，可以指定一个数组",
            " */",
            "group.addShape('path', {",
            "    attrs: {",
            "        startArrow: {",
            "            // 自定义箭头指向(0, 0)，尾部朝向 x 轴正方向的 path",
            "            path: 'M 0,0 L 20,10 L 20,-10 Z',",
            "            // 箭头的偏移量，负值代表向 x 轴正方向移动",
            "            // d: -10,",
            "        },",
            "        endArrow: {",
            "            // 自定义箭头指向(0, 0)，尾部朝向 x 轴正方向的 path",
            "            path: 'M 0,0 L 20,10 L 20,-10 Z',",
            "            // 箭头的偏移量，负值代表向 x 轴正方向移动",
            "            // d: -10,",
            "        },",
            "        path: [",
            "            ['M', 100, 100],",
            "            ['L', 200, 200],",
            "        ],",
            "        stroke: '#000',",
            "        lineWidth: 8,",
            "        lineAppendWidth: 5,",
            "        lineCap, // 1. bevel 斜角 2. round 圆角 3. miter 尖角-默认",
            "        lineJoin, // 1. bevel 斜角 2. round 圆角 3. miter 尖角-默认",
            "        lineWidth,",
            "        miterLimit,",
            "    },",
            "    name: 'path-shape',",
            "});"
        ],
        "description": "path Shape独有的样式"
    },
    "g6-shape-type-rect": {
        "prefix": "g6-shape-type-rect",
        "body": [
            "group.addShape('rect', {",
            "    attrs: {",
            "        x: 150,",
            "        y: 150,",
            "        width: 150,",
            "        height: 150,",
            "        stroke: 'black',",
            "        radius: [2, 4],",
            "    },",
            "    name: 'rect-shape',",
            "});"
        ],
        "description": "rect Shape独有的样式"
    },
    "g6-shape-type-text": {
        "prefix": "g6-shape-type-text",
        "body": [
            "/**",
            " * @param textAlign 文本内容的当前对齐方式",
            " * @param textBaseline 设置在绘制文本时使用的当前文本基线",
            " * @param fontStyle 对应font-style",
            " * @param fontWeight",
            " * @param fontSize",
            " * @param fontFamily",
            " * @param lineHeight",
            " */",
            "group.addShape('text', {",
            "    attrs: {",
            "        x, // 自身宽度的一半",
            "        y, // 自身高度的一半",
            "        text: 'test',",
            "        fill: 'red',",
            "        fontWeight: 400,",
            "        shadowOffsetX: 10,",
            "        shadowOffsetY: 10,",
            "        shadowColor: 'blue',",
            "        shadowBlur: 10,",
            "        textAlign, // center | end | left | right | start [default]",
            "        textBaseline, // top | middle | bottom [default] | alphabetic | hanging",
            "        fontStyle,",
            "        fontWeight,",
            "        fontSize,",
            "        fontFamily,",
            "        lineHeight,",
            "    },",
            "    name: 'text-shape',",
            "});"
        ],
        "description": "text Shape独有的样式"
    },
    "g6-tree-traverse": {
        "prefix": "g6-tree-traverse",
        "body": [
            "G6.Util.traverseTree(data, (d) => {",
            "    // if (d.id === minDisNodeId) isDescent = true;",
            "});"
        ],
        "description": "树的遍历"
    },
    "g6-treeGraph-addChild": {
        "prefix": "g6-treeGraph-addChild",
        "body": [
            "/**",
            " * 在指定的父节点下添加子树",
            " * @param data 子树的数据",
            " * @param parentId 父节点ID",
            " */",
            "this.treeGraph.addChild(data, parentId);",
            "",
            "const data = {",
            "    id: 'sub1',",
            "    children: [",
            "        {",
            "            id: 'subTree1',",
            "            children: []",
            "        },",
            "        {",
            "            id: 'subTree2',",
            "            children: []",
            "        }",
            "    ]",
            "};",
            "",
            "this.treeGraph.addChild(data, 'root');"
        ],
        "description": "TreeGraph在指定的父节点下添加子树"
    },
    "g6-treeGraph-findDataById": {
        "prefix": "g6-treeGraph-findDataById",
        "body": [
            "/**",
            " * 从指定的数据源targetData中查找指定的ID数据",
            " * @param id 指定的元素ID",
            " * @param targetData 指定的数据 | null 从根节点开始查找",
            " * @returns 查找到的数据",
            " */",
            "this.treeGraph.findDataById(id, targetData);",
            "",
            "// 从target节点开始查找sub1.1节点",
            "const subData = this.treeGraph.findDataById('sub1.1', target);",
            "",
            "// 从根节点开始查找sub1.1节点",
            "const subData = this.treeGraph.findDataById('sub1.1');"
        ],
        "description": "查找指定的ID数据"
    },
    "g6-treeGraph-removeChild": {
        "prefix": "g6-treeGraph-removeChild",
        "body": [
            "/**",
            " * 删除指定的子树",
            " * @param childId 子节点ID",
            " */",
            "this.treeGraph.removeChild(childId);"
        ],
        "description": "删除指定的子树"
    },
    "g6-treeGraph-updateChild": {
        "prefix": "g6-treeGraph-updateChild",
        "body": [
            "/**",
            " * 更新数据，差量更新子树",
            " * @param data 子树的数据",
            " * @param parentId 父节点ID",
            " * parent 参数为空时，则全量更新",
            " */",
            "this.treeGraph.updateChild(data, parentId);",
            "",
            "const data = {",
            "    id: 'sub1',",
            "    children: [",
            "        {",
            "            id: 'subTree1',",
            "            children: []",
            "        },",
            "        {",
            "            id: 'subTree2',",
            "            children: []",
            "        }",
            "    ]",
            "};",
            "",
            "this.treeGraph.updateChild(data, 'root');"
        ],
        "description": "更新数据，差量更新子树"
    },
    "g6-util-getTextSize": {
        "prefix": "g6-util-getTextSize",
        "body": [
            "/**",
            " * 格式化字符串",
            " * @param {string} str 原始字符串",
            " * @param {number} maxWidth 空间宽度",
            " * @param {number} fontSize 设定的字体大小",
            " * @return {string} 处理过后的结果",
            " */",
            "const getShowText = (str, maxWidth, fontSize) => {",
            "    const ellipsis = '...';",
            "    const ellipsisLength = G6.Util.getTextSize(ellipsis, fontSize)[0];",
            "    let currentWidth = 0;",
            "    let res = str;",
            "    const pattern = new RegExp('[\\u4E00-\\u9FA5]+');",
            "    str.split('').forEach((letter, i) => {",
            "        if (currentWidth > maxWidth - ellipsisLength) return;",
            "        if (pattern.test(letter)) {",
            "            currentWidth += fontSize;",
            "        } else {",
            "            currentWidth += G6.Util.getLetterWidth(letter, fontSize);",
            "        }",
            "        if (currentWidth > maxWidth - ellipsisLength) {",
            "            res = `${str.substr(0, i)}\\${ellipsis}`;",
            "        }",
            "    });",
            "    return res;",
            "};"
        ],
        "description": "获取可能带有省略号的字符串"
    },
    "g6-version": {
        "prefix": "g6-version",
        "body": [
            "console.log(G6.Global.version);"
        ],
        "description": "版本"
    }
}